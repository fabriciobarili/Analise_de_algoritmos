def block_partition(A, B, l, r, pivot, counters):
    offsetsL = [0] * B
    offsetsR = [0] * B
    startL, startR, numL, numR = 0, 0, 0, 0
    
    while r - l + 1 > 2 * B:
        # Preenchimento do buffer esquerdo
        if numL == 0:
            startL = 0
            for i in range(B):
                if l + i <= r:
                    counters['comparacoes'] += 1
                    if A[l + i] <= pivot:
                        offsetsL[numL] = i
                        numL += 1
        
        # Preenchimento do buffer direito
        if numR == 0:
            startR = 0
            for i in range(B):
                if r - i >= l:
                    counters['comparacoes'] += 1
                    if A[r - i] >= pivot:
                        offsetsR[numR] = i
                        numR += 1
        
        # Realiza as trocas em bloco
        num = min(numL, numR)
        for j in range(num):
            left_idx = l + offsetsL[startL + j]
            right_idx = r - offsetsR[startR + j]
            A[left_idx], A[right_idx] = A[right_idx], A[left_idx]
            counters['trocas'] += 1
        
        # Atualiza contadores
        numL -= num
        numR -= num
        startL += num
        startR += num
        
        # Atualiza limites
        if numL == 0:
            l += B
        if numR == 0:
            r -= B
    
    # Processamento tradicional dos elementos restantes
    i = l
    for j in range(l, r + 1):
        counters['comparacoes'] += 1
        if A[j] <= pivot:
            if i != j:
                A[i], A[j] = A[j], A[i]
                counters['trocas'] += 1
            i += 1
    
    return i - 1

def block_quicksort(A, B=32, l=0, r=None, counters=None):
    if counters is None:
        counters = {'trocas': 0, 'comparacoes': 0}
    
    if r is None:
        r = len(A) - 1
    
    if l < r:
        # Escolha do pivô (mediana de três para melhor desempenho)
        mid = (l + r) // 2
        if A[l] > A[mid]:
            A[l], A[mid] = A[mid], A[l]
            counters['trocas'] += 1
        if A[l] > A[r]:
            A[l], A[r] = A[r], A[l]
            counters['trocas'] += 1
        if A[mid] > A[r]:
            A[mid], A[r] = A[r], A[mid]
            counters['trocas'] += 1
        pivot = A[mid]
        counters['comparacoes'] += 3
        
        # Particiona o array
        p = block_partition(A, B, l, r, pivot, counters)
        
        # Ordena recursivamente as partições
        block_quicksort(A, B, l, p, counters)
        block_quicksort(A, B, p + 1, r, counters)
    
    return counters
